// Generated by CoffeeScript 1.3.3

/*
	This module defines a dictionary of 'runstrings': snippets of Javascript which
	emulate an individual 8080 instruction, using a collection of local variables
	to model the processor state and environment. These are:

	r: a Uint8Array containing all the 8080 registers, at indexes defined by Processor8080Definitions.registers
	rp: a Uint16Array backed by the same storage as r, containing the register pairs at indexes defined by Processor8080Definitions.registerPairs
	interruptsEnabled: a boolean indicating whether interrupts are enabled
	memory: a byte store responding to read(addr) and write(addr, val) methods
	io: an input/output interface responding to read(port) and write(port, val) methods
	cycle: a counter incremented for every clock cycle executed
	szpTable: a lookup table indicating the state of the S, Z and P flags for every possible ALU result
	lo, hi, result: local variables available for storing temporary results in
*/


(function() {
  var A, ACI_NN, ADC_M, ADC_R, ADD_M, ADD_R, ADI_NN, AF, ANA_M, ANA_R, ANI_NN, B, BC, C, CALL_C, CALL_NNNN, CMA, CMC, CMP_M, CMP_R, CPI_NN, D, DAA, DAD_RR, DCR_M, DCR_R, DCX_RR, DE, DI, E, EI, F, Fac, Fcy, Fp, Fs, Fz, H, HL, INR_M, INR_R, INX_RR, IN_NN, JMP_C, JMP_NNNN, L, LDAX_RR, LDA_NNNN, LHLD_NNNN, LXI_RR_NNNN, MOV_M_R, MOV_R_M, MOV_R_R, MVI_M_NN, MVI_R_NN, NOP, ORA_M, ORA_R, ORI_NN, OUT_NN, PC, PCHL, PCh, PCl, POP_RR, PUSH_RR, RAL, RAR, RET, RET_C, RLC, RRC, RST, SBB_M, SBB_R, SBI_NN, SHLD_NNNN, SP, SPHL, SPh, SPl, STAX_RR, STA_NNNN, STC, SUB_M, SUB_R, SUI_NN, XCHG, XRA_M, XRA_R, XRI_NN, XTHL, condC, condM, condNC, condNZ, condP, condPE, condPO, condZ, _ref, _ref1, _ref2;

  _ref = Processor8080Definitions.registers, A = _ref.A, F = _ref.F, B = _ref.B, C = _ref.C, D = _ref.D, E = _ref.E, H = _ref.H, L = _ref.L, SPh = _ref.SPh, SPl = _ref.SPl, PCh = _ref.PCh, PCl = _ref.PCl;

  _ref1 = Processor8080Definitions.registerPairs, AF = _ref1.AF, BC = _ref1.BC, DE = _ref1.DE, HL = _ref1.HL, SP = _ref1.SP, PC = _ref1.PC;

  _ref2 = Processor8080Definitions.flags, Fz = _ref2.Fz, Fs = _ref2.Fs, Fp = _ref2.Fp, Fcy = _ref2.Fcy, Fac = _ref2.Fac;

  condZ = "r[" + F + "] & " + Fz;

  condNZ = "!(r[" + F + "] & " + Fz + ")";

  condC = "r[" + F + "] & " + Fcy;

  condNC = "!(r[" + F + "] & " + Fcy + ")";

  condPE = "r[" + F + "] & " + Fp;

  condPO = "!(r[" + F + "] & " + Fp + ")";

  condM = "r[" + F + "] & " + Fs;

  condP = "!(r[" + F + "] & " + Fs + ")";

  ACI_NN = function() {
    return "result = (r[" + A + "] + memory.read(rp[" + PC.p + "]++) + ((r[" + F + "] & " + Fcy + ") ? 1 : 0)) & 0xff;\nr[" + F + "] = szpTable[result] | (result < r[" + A + "] ? " + Fcy + " : 0) | ((result & 0x0f) < (r[" + A + "] & 0x0f) ? " + Fac + " : 0);\nr[" + A + "] = result;\ncycle += 7;";
  };

  ADC_M = function() {
    return "result = (r[" + A + "] + memory.read(rp[" + HL.p + "]) + ((r[" + F + "] & " + Fcy + ") ? 1 : 0)) & 0xff;\nr[" + F + "] = szpTable[result] | (result < r[" + A + "] ? " + Fcy + " : 0) | ((result & 0x0f) < (r[" + A + "] & 0x0f) ? " + Fac + " : 0);\nr[" + A + "] = result;\ncycle += 7;";
  };

  ADC_R = function(r) {
    return "result = (r[" + A + "] + r[" + r + "] + ((r[" + F + "] & " + Fcy + ") ? 1 : 0)) & 0xff;\nr[" + F + "] = szpTable[result] | (result < r[" + A + "] ? " + Fcy + " : 0) | ((result & 0x0f) < (r[" + A + "] & 0x0f) ? " + Fac + " : 0);\nr[" + A + "] = result;\ncycle += 4;";
  };

  ADD_M = function() {
    return "result = (r[" + A + "] + memory.read(rp[" + HL.p + "])) & 0xff;\nr[" + F + "] = szpTable[result] | (result < r[" + A + "] ? " + Fcy + " : 0) | ((result & 0x0f) < (r[" + A + "] & 0x0f) ? " + Fac + " : 0);\nr[" + A + "] = result;\ncycle += 7;";
  };

  ADD_R = function(r) {
    return "result = (r[" + A + "] + r[" + r + "]) & 0xff;\nr[" + F + "] = szpTable[result] | (result < r[" + A + "] ? " + Fcy + " : 0) | ((result & 0x0f) < (r[" + A + "] & 0x0f) ? " + Fac + " : 0);\nr[" + A + "] = result;\ncycle += 4;";
  };

  ADI_NN = function() {
    return "result = (r[" + A + "] + memory.read(rp[" + PC.p + "]++)) & 0xff;\nr[" + F + "] = szpTable[result] | (result < r[" + A + "] ? " + Fcy + " : 0) | ((result & 0x0f) < (r[" + A + "] & 0x0f) ? " + Fac + " : 0);\nr[" + A + "] = result;\ncycle += 7;";
  };

  ANA_M = function() {
    return "r[" + A + "] &= memory.read(rp[" + HL.p + "]); r[" + F + "] = szpTable[r[" + A + "]];\ncycle += 7;";
  };

  ANA_R = function(r) {
    if (r === A) {
      return "r[" + F + "] = szpTable[r[" + A + "]];\ncycle += 4;";
    } else {
      return "r[" + A + "] &= r[" + r + "]; r[" + F + "] = szpTable[r[" + A + "]];\ncycle += 4;";
    }
  };

  ANI_NN = function() {
    return "r[" + A + "] &= memory.read(rp[" + PC.p + "]++);\nr[" + F + "] = szpTable[r[" + A + "]];\ncycle += 7;";
  };

  CALL_C = function(cond) {
    return "if (" + cond + ") {\n	lo = memory.read(rp[" + PC.p + "]++);\n	hi = memory.read(rp[" + PC.p + "]++);\n	memory.write(--rp[" + SP.p + "], r[" + PCh + "]);\n	memory.write(--rp[" + SP.p + "], r[" + PCl + "]);\n	r[" + PCh + "] = hi; r[" + PCl + "] = lo;\n	cycle += 17;\n} else {\n	rp[" + PC.p + "] += 2;\n	cycle += 11;\n}";
  };

  CALL_NNNN = function(cond) {
    return "lo = memory.read(rp[" + PC.p + "]++);\nhi = memory.read(rp[" + PC.p + "]++);\nmemory.write(--rp[" + SP.p + "], r[" + PCh + "]);\nmemory.write(--rp[" + SP.p + "], r[" + PCl + "]);\nr[" + PCh + "] = hi; r[" + PCl + "] = lo;\ncycle += 17;";
  };

  CMA = function() {
    return "r[" + A + "] = ~r[" + A + "];\ncycle += 4;";
  };

  CMC = function() {
    return "r[" + F + "] ^= (r[" + F + "] & " + Fcy + ");\ncycle += 4;";
  };

  CMP_M = function() {
    return "result = (r[" + A + "] - memory.read(rp[" + HL.p + "])) & 0xff;\nr[" + F + "] = szpTable[result] | (result > r[" + A + "] ? " + Fcy + " : 0) | ((result & 0x0f) > (r[" + A + "] & 0x0f) ? " + Fac + " : 0);\ncycle += 7;";
  };

  CMP_R = function(r) {
    if (r === A) {
      return "r[" + F + "] = szpTable[0];\ncycle += 4;";
    } else {
      return "result = (r[" + A + "] - r[" + r + "]) & 0xff;\nr[" + F + "] = szpTable[result] | (result > r[" + A + "] ? " + Fcy + " : 0) | ((result & 0x0f) > (r[" + A + "] & 0x0f) ? " + Fac + " : 0);\ncycle += 4;";
    }
  };

  CPI_NN = function() {
    return "result = (r[" + A + "] - memory.read(rp[" + PC.p + "]++)) & 0xff;\nr[" + F + "] = szpTable[result] | (result > r[" + A + "] ? " + Fcy + " : 0) | ((result & 0x0f) > (r[" + A + "] & 0x0f) ? " + Fac + " : 0);\ncycle += 7;";
  };

  DAA = function() {
    return "var newF = 0;\nif (((r[" + A + "] & 0x0f) > 0x09) || (r[" + F + "] & " + Fac + ")) {\n	/* add 6 to A; set AC if this causes overflow from bit 3 (i.e. bottom four bits are >= A) */\n	newF |= ((r[" + A + "] & 0x0f) >= 0x0a) ? " + Fac + " : 0;\n	r[" + A + "] += 0x06;\n}\nif (((r[" + A + "] & 0xf0) > 0x90) || (r[" + F + "] & " + Fcy + ")) {\n	newF |= ((r[" + A + "] & 0xf0) >= 0xa0) ? " + Fcy + " : 0;\n	r[" + A + "] += 0x60;\n}\nr[" + F + "] = newF | szpTable[r[" + A + "]];\ncycle += 4;";
  };

  DAD_RR = function(rr) {
    return "result = rp[" + HL.p + "] + rp[" + rr.p + "];\nr[" + F + "] = (r[" + F + "] & ~" + Fcy + ") | (result & 0x10000 ? " + Fcy + " : 0);\nrp[" + HL.p + "] = result;\ncycle += 10;";
  };

  DCR_M = function() {
    return "result = (memory.read(rp[" + HL.p + "]) - 1) & 0xff;\n/* preserve carry; take S, Z, P from lookup table; set AC iff lower nibble has become f */\nr[" + F + "] = (r[" + F + "] & " + Fcy + ") | szpTable[result] | ((result & 0x0f) == 0x0f ? " + Fac + " : 0);\nmemory.write(rp[" + HL.p + "], result);\ncycle += 10;";
  };

  DCR_R = function(r) {
    return "r[" + r + "]--;\n/* preserve carry; take S, Z, P from lookup table; set AC iff lower nibble has become f */\nr[" + F + "] = (r[" + F + "] & " + Fcy + ") | szpTable[r[" + r + "]] | ((r[" + r + "] & 0x0f) == 0x0f ? " + Fac + " : 0);\ncycle += 5;";
  };

  DCX_RR = function(rr) {
    return "rp[" + rr.p + "]--;\ncycle += 5;";
  };

  DI = function() {
    return "interruptsEnabled = false;\ncycle += 4;";
  };

  EI = function() {
    return "interruptsEnabled = true;\ncycle += 4;";
  };

  IN_NN = function() {
    return "r[" + A + "] = io.read(memory.read(rp[" + PC.p + "]++));\ncycle += 10;";
  };

  INX_RR = function(rr) {
    return "rp[" + rr.p + "]++;\ncycle += 5;";
  };

  INR_M = function() {
    return "result = (memory.read(rp[" + HL.p + "]) + 1) & 0xff;\n/* preserve carry; take S, Z, P from lookup table; set AC iff lower nibble has become 0 */\nr[" + F + "] = (r[" + F + "] & " + Fcy + ") | szpTable[result] | ((result & 0x0f) ? 0 : " + Fac + ");\nmemory.write(rp[" + HL.p + "], result);\ncycle += 10;";
  };

  INR_R = function(r) {
    return "r[" + r + "]++;\n/* preserve carry; take S, Z, P from lookup table; set AC iff lower nibble has become 0 */\nr[" + F + "] = (r[" + F + "] & " + Fcy + ") | szpTable[r[" + r + "]] | ((r[" + r + "] & 0x0f) ? 0 : " + Fac + ");\ncycle += 5;";
  };

  JMP_C = function(cond) {
    return "if (" + cond + ") {\n	lo = memory.read(rp[" + PC.p + "]++);\n	hi = memory.read(rp[" + PC.p + "]);\n	r[" + PCh + "] = hi; r[" + PCl + "] = lo;\n} else {\n	rp[" + PC.p + "] += 2;\n}\ncycle += 10;";
  };

  JMP_NNNN = function() {
    return "lo = memory.read(rp[" + PC.p + "]++);\nhi = memory.read(rp[" + PC.p + "]);\nr[" + PCh + "] = hi; r[" + PCl + "] = lo;\ncycle += 10;";
  };

  LDA_NNNN = function() {
    return "lo = memory.read(rp[" + PC.p + "]++);\nhi = memory.read(rp[" + PC.p + "]++);\nr[" + A + "] = memory.read((hi << 8) | lo);\ncycle += 13;";
  };

  LDAX_RR = function(rr) {
    return "r[" + A + "] = memory.read(rp[" + rr.p + "]);\ncycle += 7;";
  };

  LHLD_NNNN = function() {
    return "lo = memory.read(rp[" + PC.p + "]++);\nhi = memory.read(rp[" + PC.p + "]++);\nresult = (hi << 8) | lo;\nr[" + L + "] = memory.read(result);\nr[" + H + "] = memory.read((result + 1) & 0xffff);\ncycle += 16;";
  };

  LXI_RR_NNNN = function(rr) {
    return "r[" + rr.l + "] = memory.read(rp[" + PC.p + "]++);\nr[" + rr.h + "] = memory.read(rp[" + PC.p + "]++);\ncycle += 10;";
  };

  MOV_M_R = function(r) {
    return "memory.write(rp[" + HL.p + "], r[" + r + "]);\ncycle += 7;";
  };

  MOV_R_M = function(r) {
    return "r[" + r + "] = memory.read(rp[" + HL.p + "]);\ncycle += 7;";
  };

  MOV_R_R = function(r1, r2) {
    if (r1 === r2) {
      return "cycle += 5;";
    } else {
      return "r[" + r1 + "] = r[" + r2 + "];\ncycle += 5;";
    }
  };

  MVI_M_NN = function() {
    return "memory.write(rp[" + HL.p + "], memory.read(rp[" + PC.p + "]++));\ncycle += 10;";
  };

  MVI_R_NN = function(r) {
    return "r[" + r + "] = memory.read(rp[" + PC.p + "]++);\ncycle += 7;";
  };

  NOP = function() {
    return "cycle += 4;";
  };

  ORA_M = function() {
    return "r[" + A + "] |= memory.read(rp[" + HL.p + "]); r[" + F + "] = szpTable[r[" + A + "]];\ncycle += 7;";
  };

  ORA_R = function(r) {
    if (r === A) {
      return "r[" + F + "] = szpTable[r[" + A + "]];\ncycle += 4;";
    } else {
      return "r[" + A + "] |= r[" + r + "]; r[" + F + "] = szpTable[r[" + A + "]];\ncycle += 4;";
    }
  };

  ORI_NN = function() {
    return "r[" + A + "] |= memory.read(rp[" + PC.p + "]++);\nr[" + F + "] = szpTable[r[" + A + "]];\ncycle += 7;";
  };

  OUT_NN = function() {
    return "io.write(memory.read(rp[" + PC.p + "]++), r[" + A + "]);\ncycle += 10;";
  };

  PCHL = function() {
    return "rp[" + PC.p + "] = rp[" + HL.p + "];\ncycle += 5;";
  };

  POP_RR = function(rr) {
    return "r[" + rr.l + "] = memory.read(rp[" + SP.p + "]++);\nr[" + rr.h + "] = memory.read(rp[" + SP.p + "]++);\ncycle += 10;";
  };

  PUSH_RR = function(rr) {
    return "memory.write(--rp[" + SP.p + "], r[" + rr.h + "]);\nmemory.write(--rp[" + SP.p + "], r[" + rr.l + "]);\ncycle += 11;";
  };

  RAL = function() {
    return "result = (r[" + A + "] << 1) | (r[" + F + "] & " + Fcy + " ? 1 : 0);\n/* copy top bit of A to carry flag */\nr[" + F + "] = (r[" + A + "] & 0x80) ? (r[" + F + "] | " + Fcy + ") : (r[" + F + "] & ~" + Fcy + ");\nr[" + A + "] = result;\ncycle += 4;";
  };

  RAR = function() {
    return "result = (r[" + A + "] >> 1) | (r[" + F + "] & " + Fcy + " ? 0x80 : 0);\n/* copy bottom bit of A to carry flag */\nr[" + F + "] = (r[" + A + "] & 0x01) ? (r[" + F + "] | " + Fcy + ") : (r[" + F + "] & ~" + Fcy + ");\nr[" + A + "] = result;\ncycle += 4;";
  };

  RET = function() {
    return "r[" + PCl + "] = memory.read(rp[" + SP.p + "]++);\nr[" + PCh + "] = memory.read(rp[" + SP.p + "]++);\ncycle += 10;";
  };

  RET_C = function(cond) {
    return "if (" + cond + ") {\n	r[" + PCl + "] = memory.read(rp[" + SP.p + "]++);\n	r[" + PCh + "] = memory.read(rp[" + SP.p + "]++);\n	cycle += 11;\n} else {\n	cycle += 5;\n}";
  };

  RLC = function() {
    return "/* copy top bit of A to carry flag */\nr[" + F + "] = (r[" + A + "] & 0x80) ? (r[" + F + "] | " + Fcy + ") : (r[" + F + "] & ~" + Fcy + ");\nr[" + A + "] = (r[" + A + "] << 1) | ((r[" + A + "] & 0x80) >> 7);\ncycle += 4;";
  };

  RRC = function() {
    return "/* copy bottom bit of A to carry flag */\nr[" + F + "] = (r[" + A + "] & 0x01) ? (r[" + F + "] | " + Fcy + ") : (r[" + F + "] & ~" + Fcy + ");\nr[" + A + "] = (r[" + A + "] >> 1) | ((r[" + A + "] & 0x01) << 7);\ncycle += 4;";
  };

  RST = function(addr) {
    return "memory.write(--rp[" + SP.p + "], r[" + PCh + "]);\nmemory.write(--rp[" + SP.p + "], r[" + PCl + "]);\nrp[" + PC.p + "] = " + addr + ";\ncycle += 11;";
  };

  SBB_M = function() {
    return "result = (r[" + A + "] - memory.read(rp[" + HL.p + "]) - ((r[" + F + "] & " + Fcy + ") ? 1 : 0)) & 0xff;\nr[" + F + "] = szpTable[result] | (result > r[" + A + "] ? " + Fcy + " : 0) | ((result & 0x0f) > (r[" + A + "] & 0x0f) ? " + Fac + " : 0);\nr[" + A + "] = result;\ncycle += 7;";
  };

  SBB_R = function(r) {
    return "result = (r[" + A + "] - r[" + r + "] - ((r[" + F + "] & " + Fcy + ") ? 1 : 0)) & 0xff;\nr[" + F + "] = szpTable[result] | (result > r[" + A + "] ? " + Fcy + " : 0) | ((result & 0x0f) > (r[" + A + "] & 0x0f) ? " + Fac + " : 0);\nr[" + A + "] = result;\ncycle += 4;";
  };

  SBI_NN = function() {
    return "result = (r[" + A + "] - memory.read(rp[" + PC.p + "]++) - ((r[" + F + "] & " + Fcy + ") ? 1 : 0)) & 0xff;\nr[" + F + "] = szpTable[result] | (result > r[" + A + "] ? " + Fcy + " : 0) | ((result & 0x0f) > (r[" + A + "] & 0x0f) ? " + Fac + " : 0);\nr[" + A + "] = result;\ncycle += 7;";
  };

  SHLD_NNNN = function() {
    return "lo = memory.read(rp[" + PC.p + "]++);\nhi = memory.read(rp[" + PC.p + "]++);\nresult = (hi << 8) | lo;\nmemory.write(result, r[" + L + "]);\nmemory.write((result + 1) & 0xffff, r[" + H + "]);\ncycle += 16;";
  };

  SPHL = function() {
    return "rp[" + SP.p + "] = rp[" + HL.p + "];\ncycle += 5;";
  };

  STA_NNNN = function() {
    return "lo = memory.read(rp[" + PC.p + "]++);\nhi = memory.read(rp[" + PC.p + "]++);\nmemory.write((hi << 8) | lo, r[" + A + "]);\ncycle += 13;";
  };

  STAX_RR = function(rr) {
    return "memory.write(rp[" + rr.p + "], r[" + A + "]);\ncycle += 7;";
  };

  STC = function() {
    return "r[" + F + "] |= " + Fcy + ";\ncycle += 4;";
  };

  SUB_M = function() {
    return "result = (r[" + A + "] - memory.read(rp[" + HL.p + "])) & 0xff;\nr[" + F + "] = szpTable[result] | (result > r[" + A + "] ? " + Fcy + " : 0) | ((result & 0x0f) > (r[" + A + "] & 0x0f) ? " + Fac + " : 0);\nr[" + A + "] = result;\ncycle += 7;";
  };

  SUB_R = function(r) {
    return "result = (r[" + A + "] - r[" + r + "]) & 0xff;\nr[" + F + "] = szpTable[result] | (result > r[" + A + "] ? " + Fcy + " : 0) | ((result & 0x0f) > (r[" + A + "] & 0x0f) ? " + Fac + " : 0);\nr[" + A + "] = result;\ncycle += 4;";
  };

  SUI_NN = function() {
    return "result = (r[" + A + "] - memory.read(rp[" + PC.p + "]++)) & 0xff;\nr[" + F + "] = szpTable[result] | (result > r[" + A + "] ? " + Fcy + " : 0) | ((result & 0x0f) > (r[" + A + "] & 0x0f) ? " + Fac + " : 0);\nr[" + A + "] = result;\ncycle += 7;";
  };

  XCHG = function() {
    return "result = rp[" + HL.p + "];\nrp[" + HL.p + "] = rp[" + DE.p + "];\nrp[" + DE.p + "] = result;\ncycle += 5;";
  };

  XRA_M = function() {
    return "r[" + A + "] ^= memory.read(rp[" + HL.p + "]); r[" + F + "] = szpTable[r[" + A + "]];\ncycle += 7;";
  };

  XRA_R = function(r) {
    if (r === A) {
      return "r[" + A + "] = 0; r[" + F + "] = szpTable[r[" + A + "]];\ncycle += 4;";
    } else {
      return "r[" + A + "] ^= r[" + r + "]; r[" + F + "] = szpTable[r[" + A + "]];\ncycle += 4;";
    }
  };

  XRI_NN = function() {
    return "r[" + A + "] ^= memory.read(rp[" + PC.p + "]++);\nr[" + F + "] = szpTable[r[" + A + "]];\ncycle += 7;";
  };

  XTHL = function() {
    return "lo = memory.read(rp[" + SP.p + "]);\nhi = memory.read(rp[" + SP.p + "] + 1);\nmemory.write(rp[" + SP.p + "], r[" + L + "]);\nmemory.write(rp[" + SP.p + "] + 1, r[" + H + "]);\nr[" + L + "] = lo; r[" + H + "] = hi;\ncycle += 18;";
  };

  window.OPCODE_RUN_STRINGS = {
    0x00: NOP(),
    0x01: LXI_RR_NNNN(BC),
    0x02: STAX_RR(BC),
    0x03: INX_RR(BC),
    0x04: INR_R(B),
    0x05: DCR_R(B),
    0x06: MVI_R_NN(B),
    0x07: RLC(),
    0x09: DAD_RR(BC),
    0x0a: LDAX_RR(BC),
    0x0b: DCX_RR(BC),
    0x0c: INR_R(C),
    0x0d: DCR_R(C),
    0x0e: MVI_R_NN(C),
    0x0f: RRC(),
    0x11: LXI_RR_NNNN(DE),
    0x12: STAX_RR(DE),
    0x13: INX_RR(DE),
    0x14: INR_R(D),
    0x15: DCR_R(D),
    0x16: MVI_R_NN(D),
    0x17: RAL(),
    0x19: DAD_RR(DE),
    0x1a: LDAX_RR(DE),
    0x1b: DCX_RR(DE),
    0x1c: INR_R(E),
    0x1d: DCR_R(E),
    0x1e: MVI_R_NN(E),
    0x1f: RAR(),
    0x21: LXI_RR_NNNN(HL),
    0x22: SHLD_NNNN(),
    0x23: INX_RR(HL),
    0x24: INR_R(H),
    0x25: DCR_R(H),
    0x26: MVI_R_NN(H),
    0x27: DAA(),
    0x29: DAD_RR(HL),
    0x2a: LHLD_NNNN(),
    0x2b: DCX_RR(HL),
    0x2c: INR_R(L),
    0x2d: DCR_R(L),
    0x2e: MVI_R_NN(L),
    0x2f: CMA(),
    0x31: LXI_RR_NNNN(SP),
    0x32: STA_NNNN(),
    0x33: INX_RR(SP),
    0x34: INR_M(),
    0x35: DCR_M(),
    0x36: MVI_M_NN(),
    0x37: STC(),
    0x39: DAD_RR(SP),
    0x3a: LDA_NNNN(),
    0x3b: DCX_RR(SP),
    0x3c: INR_R(A),
    0x3d: DCR_R(A),
    0x3e: MVI_R_NN(A),
    0x3f: CMC(),
    0x40: MOV_R_R(B, B),
    0x41: MOV_R_R(B, C),
    0x42: MOV_R_R(B, D),
    0x43: MOV_R_R(B, E),
    0x44: MOV_R_R(B, H),
    0x45: MOV_R_R(B, L),
    0x46: MOV_R_M(B),
    0x47: MOV_R_R(B, A),
    0x48: MOV_R_R(C, B),
    0x49: MOV_R_R(C, C),
    0x4a: MOV_R_R(C, D),
    0x4b: MOV_R_R(C, E),
    0x4c: MOV_R_R(C, H),
    0x4d: MOV_R_R(C, L),
    0x4e: MOV_R_M(C),
    0x4f: MOV_R_R(C, A),
    0x50: MOV_R_R(D, B),
    0x51: MOV_R_R(D, C),
    0x52: MOV_R_R(D, D),
    0x53: MOV_R_R(D, E),
    0x54: MOV_R_R(D, H),
    0x55: MOV_R_R(D, L),
    0x56: MOV_R_M(D),
    0x57: MOV_R_R(D, A),
    0x58: MOV_R_R(E, B),
    0x59: MOV_R_R(E, C),
    0x5a: MOV_R_R(E, D),
    0x5b: MOV_R_R(E, E),
    0x5c: MOV_R_R(E, H),
    0x5d: MOV_R_R(E, L),
    0x5e: MOV_R_M(E),
    0x5f: MOV_R_R(E, A),
    0x60: MOV_R_R(H, B),
    0x61: MOV_R_R(H, C),
    0x62: MOV_R_R(H, D),
    0x63: MOV_R_R(H, E),
    0x64: MOV_R_R(H, H),
    0x65: MOV_R_R(H, L),
    0x66: MOV_R_M(H),
    0x67: MOV_R_R(H, A),
    0x68: MOV_R_R(L, B),
    0x69: MOV_R_R(L, C),
    0x6a: MOV_R_R(L, D),
    0x6b: MOV_R_R(L, E),
    0x6c: MOV_R_R(L, H),
    0x6d: MOV_R_R(L, L),
    0x6e: MOV_R_M(L),
    0x6f: MOV_R_R(L, A),
    0x70: MOV_M_R(B),
    0x71: MOV_M_R(C),
    0x72: MOV_M_R(D),
    0x73: MOV_M_R(E),
    0x74: MOV_M_R(H),
    0x75: MOV_M_R(L),
    0x77: MOV_M_R(A),
    0x78: MOV_R_R(A, B),
    0x79: MOV_R_R(A, C),
    0x7a: MOV_R_R(A, D),
    0x7b: MOV_R_R(A, E),
    0x7c: MOV_R_R(A, H),
    0x7d: MOV_R_R(A, L),
    0x7e: MOV_R_M(A),
    0x7f: MOV_R_R(A, A),
    0x80: ADD_R(B),
    0x81: ADD_R(C),
    0x82: ADD_R(D),
    0x83: ADD_R(E),
    0x84: ADD_R(H),
    0x85: ADD_R(L),
    0x86: ADD_M(),
    0x87: ADD_R(A),
    0x88: ADC_R(B),
    0x89: ADC_R(C),
    0x8a: ADC_R(D),
    0x8b: ADC_R(E),
    0x8c: ADC_R(H),
    0x8d: ADC_R(L),
    0x8e: ADC_M(),
    0x8f: ADC_R(A),
    0x90: SUB_R(B),
    0x91: SUB_R(C),
    0x92: SUB_R(D),
    0x93: SUB_R(E),
    0x94: SUB_R(H),
    0x95: SUB_R(L),
    0x96: SUB_M(),
    0x97: SUB_R(A),
    0x98: SBB_R(B),
    0x99: SBB_R(C),
    0x9a: SBB_R(D),
    0x9b: SBB_R(E),
    0x9c: SBB_R(H),
    0x9d: SBB_R(L),
    0x9e: SBB_M(),
    0x9f: SBB_R(A),
    0xa0: ANA_R(B),
    0xa1: ANA_R(C),
    0xa2: ANA_R(D),
    0xa3: ANA_R(E),
    0xa4: ANA_R(H),
    0xa5: ANA_R(L),
    0xa6: ANA_M(),
    0xa7: ANA_R(A),
    0xa8: XRA_R(B),
    0xa9: XRA_R(C),
    0xaa: XRA_R(D),
    0xab: XRA_R(E),
    0xac: XRA_R(H),
    0xad: XRA_R(L),
    0xae: XRA_M(),
    0xaf: XRA_R(A),
    0xb0: ORA_R(B),
    0xb1: ORA_R(C),
    0xb2: ORA_R(D),
    0xb3: ORA_R(E),
    0xb4: ORA_R(H),
    0xb5: ORA_R(L),
    0xb6: ORA_M(),
    0xb7: ORA_R(A),
    0xb8: CMP_R(B),
    0xb9: CMP_R(C),
    0xba: CMP_R(D),
    0xbb: CMP_R(E),
    0xbc: CMP_R(H),
    0xbd: CMP_R(L),
    0xbe: CMP_M(),
    0xbf: CMP_R(A),
    0xc0: RET_C(condNZ),
    0xc1: POP_RR(BC),
    0xc2: JMP_C(condNZ),
    0xc3: JMP_NNNN(),
    0xc4: CALL_C(condNZ),
    0xc5: PUSH_RR(BC),
    0xc6: ADI_NN(),
    0xc7: RST(0x0000),
    0xc8: RET_C(condZ),
    0xc9: RET(),
    0xca: JMP_C(condZ),
    0xcc: CALL_C(condZ),
    0xcd: CALL_NNNN(),
    0xce: ACI_NN(),
    0xcf: RST(0x0008),
    0xd0: RET_C(condNC),
    0xd1: POP_RR(DE),
    0xd2: JMP_C(condNC),
    0xd3: OUT_NN(),
    0xd4: CALL_C(condNC),
    0xd5: PUSH_RR(DE),
    0xd6: SUI_NN(),
    0xd7: RST(0x0010),
    0xd8: RET_C(condC),
    0xda: JMP_C(condC),
    0xdb: IN_NN(),
    0xdc: CALL_C(condC),
    0xde: SBI_NN(),
    0xdf: RST(0x0018),
    0xe0: RET_C(condPO),
    0xe1: POP_RR(HL),
    0xe2: JMP_C(condPO),
    0xe3: XTHL(),
    0xe4: CALL_C(condPO),
    0xe5: PUSH_RR(HL),
    0xe6: ANI_NN(),
    0xe7: RST(0x0020),
    0xe8: RET_C(condPE),
    0xe9: PCHL(),
    0xea: JMP_C(condPE),
    0xeb: XCHG(),
    0xec: CALL_C(condPE),
    0xee: XRI_NN(),
    0xef: RST(0x0028),
    0xf0: RET_C(condP),
    0xf1: POP_RR(AF),
    0xf2: JMP_C(condP),
    0xf3: DI(),
    0xf4: CALL_C(condP),
    0xf5: PUSH_RR(AF),
    0xf6: ORI_NN(),
    0xf7: RST(0x0030),
    0xf8: RET_C(condM),
    0xf9: SPHL(),
    0xfa: JMP_C(condM),
    0xfb: EI(),
    0xfc: CALL_C(condM),
    0xfe: CPI_NN(),
    0xff: RST(0x0038)
  };

}).call(this);
