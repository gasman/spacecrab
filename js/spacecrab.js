// Generated by CoffeeScript 1.3.3
(function() {
  var IO, Memory, loadFromUrl;

  loadFromUrl = function(url, callback) {
    var request;
    request = new XMLHttpRequest();
    request.addEventListener('error', function(e) {
      throw 'Error loading from URL: ' + url;
    }, false);
    request.addEventListener('load', function(e) {
      if (request.status === 200) {
        return callback(request.response);
      } else {
        throw 'Error loading from URL: ' + url;
      }
    }, false);
    request.open('GET', url, true);
    request.responseType = "arraybuffer";
    return request.send();
  };

  Memory = function() {
    var mem, self;
    self = {};
    mem = new Uint8Array(0x4000);
    self.loadPage = function(addr, data) {
      var byte, bytes, i, _i, _len, _results;
      bytes = new Uint8Array(data);
      _results = [];
      for (i = _i = 0, _len = bytes.length; _i < _len; i = ++_i) {
        byte = bytes[i];
        _results.push(mem[addr + i] = bytes[i]);
      }
      return _results;
    };
    self.read = function(addr) {
      return mem[addr & 0x3fff];
    };
    self.write = function(addr, val) {
      if (addr & 0x2000) {
        return mem[addr & 0x3fff] = val;
      }
    };
    self.dump = function() {
      return console.log(mem);
    };
    return self;
  };

  IO = function() {
    var port1, port2, port2in, port4hi, port4lo, self;
    self = {};
    port2 = 0;
    port4hi = 0;
    port4lo = 0;
    port1 = 0;
    port2in = 0;
    window.addEventListener('keydown', function(e) {
      switch (e.which) {
        case 49:
          return port1 |= 0x04;
        case 50:
          return port1 |= 0x02;
        case 190:
          port1 |= 0x10;
          return port2in |= 0x10;
        case 90:
          port1 |= 0x20;
          return port2in |= 0x20;
        case 88:
          port1 |= 0x40;
          return port2in |= 0x40;
      }
    });
    window.addEventListener('keyup', function(e) {
      switch (e.which) {
        case 49:
          return port1 &= ~0x04;
        case 50:
          return port1 &= ~0x02;
        case 67:
          return port1 |= 0x01;
        case 190:
          port1 &= ~0x10;
          return port2in &= ~0x10;
        case 90:
          port1 &= ~0x20;
          return port2in &= ~0x20;
        case 88:
          port1 &= ~0x40;
          return port2in &= ~0x40;
      }
    });
    self.read = function(port) {
      var port4, result;
      switch (port) {
        case 1:
          result = port1;
          port1 &= 0xfe;
          return result;
        case 2:
          return port2in;
        case 3:
          port4 = (port4hi << 8) | port4lo;
          return ((port4 << port2) >> 8) & 0xff;
        default:
          return 0;
      }
    };
    self.write = function(port, val) {
      switch (port) {
        case 2:
          return port2 = val;
        case 4:
          port4lo = port4hi;
          return port4hi = val;
      }
    };
    return self;
  };

  window.init = function() {
    var allRomsLoaded, drawScreen, imageData, io, loadRom, loadedRomCount, memory, pixels, proc, runFrame, screenCanvas, screenCtx;
    memory = Memory();
    io = IO();
    loadedRomCount = 0;
    screenCanvas = document.getElementById('screen');
    screenCtx = screenCanvas.getContext('2d');
    imageData = screenCtx.createImageData(224, 256);
    pixels = imageData.data;
    proc = null;
    loadRom = function(url, addr) {
      return loadFromUrl(url, function(data) {
        memory.loadPage(addr, data);
        loadedRomCount++;
        if (loadedRomCount === 4) {
          return allRomsLoaded();
        }
      });
    };
    loadRom('roms/invaders.h', 0x0000);
    loadRom('roms/invaders.g', 0x0800);
    loadRom('roms/invaders.f', 0x1000);
    loadRom('roms/invaders.e', 0x1800);
    allRomsLoaded = function() {
      proc = Processor8080(memory, io);
      return runFrame();
    };
    runFrame = function() {
      proc.runForCycles(16667);
      proc.interrupt(0xcf);
      proc.runForCycles(16667);
      proc.interrupt(0xd7);
      drawScreen();
      return setTimeout(runFrame, 17);
    };
    return drawScreen = function() {
      var b, i, pos, rowStep, x, y, _i, _j, _k;
      rowStep = 224 * 4;
      for (y = _i = 0; _i < 224; y = ++_i) {
        pos = (rowStep * 255) + (y << 2);
        for (x = _j = 0; _j < 32; x = ++_j) {
          b = memory.read(0x2400 + (y << 5) + x);
          for (i = _k = 0; _k < 8; i = ++_k) {
            if (b & 0x01) {
              pixels[pos] = pixels[pos + 1] = pixels[pos + 2] = 0xff;
              pixels[pos + 3] = 0xff;
            } else {
              pixels[pos] = pixels[pos + 1] = pixels[pos + 2] = 0x00;
              pixels[pos + 3] = 0xff;
            }
            b >>= 1;
            pos -= rowStep;
          }
        }
      }
      return screenCtx.putImageData(imageData, 0, 0);
    };
  };

}).call(this);
