// Generated by CoffeeScript 1.3.3
(function() {
  var AF, BC, DE, Fac, Fcy, Fp, Fs, Fz, HL, PC, SP, define8080JS, indirectEval, opcodeSwitch, _ref, _ref1;

  _ref = Processor8080Definitions.registerPairs, AF = _ref.AF, BC = _ref.BC, DE = _ref.DE, HL = _ref.HL, SP = _ref.SP, PC = _ref.PC;

  _ref1 = Processor8080Definitions.flags, Fz = _ref1.Fz, Fs = _ref1.Fs, Fp = _ref1.Fp, Fcy = _ref1.Fcy, Fac = _ref1.Fac;

  opcodeSwitch = function(runStringTable) {
    var clauses, opcode, runString, _i;
    clauses = [];
    for (opcode = _i = 0; 0 <= 0x100 ? _i < 0x100 : _i > 0x100; opcode = 0 <= 0x100 ? ++_i : --_i) {
      runString = runStringTable[opcode];
      if (runString != null) {
        clauses.push("case " + opcode + ":\n	" + runString + "\n	break;");
      }
    }
    return "switch (opcode) {\n	" + (clauses.join('')) + "\n	default:\n		throw('unimplemented opcode: ' + opcode.toString(16));\n}";
  };

  define8080JS = "window.Processor8080 = function(memory, io) {\n	var self = {};\n\n	var registerBuffer = new ArrayBuffer(12);\n	/* Expose registerBuffer as both register pairs and individual registers */\n	var rp = new Uint16Array(registerBuffer);\n	var r = new Uint8Array(registerBuffer);\n\n	var szpTable = Processor8080Definitions.szpTable;\n\n	var cycle = 0;\n	var interruptsEnabled = false;\n	var interruptPending = false;\n	var interruptOpcode;\n\n	self.runForCycles = function(cycleCount) {\n		var lo, hi, result, opcode;\n\n		while(cycle < cycleCount) {\n			if (interruptPending) {\n				opcode = interruptOpcode;\n				interruptPending = false;\n			} else {\n				opcode = memory.read(rp[" + PC.p + "]++);\n			}\n\n			" + (opcodeSwitch(OPCODE_RUN_STRINGS)) + "\n		}\n		cycle -= cycleCount;\n	};\n\n	self.interrupt = function(opcode) {\n		if (interruptsEnabled) {\n			interruptPending = true;\n			interruptOpcode = opcode;\n		}\n	};\n\n	self.logState = function(label) {\n		console.log(label + ': ' + rp[" + AF.p + "].toString(16) + ' ' + rp[" + BC.p + "].toString(16) + ' ' + rp[" + DE.p + "].toString(16) + ' ' + rp[" + HL.p + "].toString(16) + ' ' + rp[" + PC.p + "].toString(16) + ' ' + rp[" + SP.p + "].toString(16) + ' at cycle ' + cycle);\n	};\n\n	return self;\n}";

  indirectEval = eval;

  indirectEval(define8080JS);

}).call(this);
